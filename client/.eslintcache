[{"E:\\React\\test\\client\\src\\index.js":"1","E:\\React\\test\\client\\src\\reportWebVitals.js":"2","E:\\React\\test\\client\\src\\App.js":"3","E:\\React\\test\\client\\src\\components\\index.js":"4","E:\\React\\test\\client\\src\\axios\\store.js":"5","E:\\React\\test\\client\\src\\axios\\reducers\\index.js":"6","E:\\React\\test\\client\\src\\axios\\reducers\\cocktails.js":"7","E:\\React\\test\\client\\src\\history.js":"8","E:\\React\\test\\client\\src\\components\\errorpage.js":"9","E:\\React\\test\\client\\src\\components\\detailspage.js":"10","E:\\React\\test\\client\\src\\axios\\actions\\cocktails.js":"11","E:\\React\\test\\client\\src\\components\\layout.js":"12","E:\\React\\test\\client\\src\\components\\custom.js":"13","E:\\React\\test\\client\\src\\components\\baseUrl.js":"14"},{"size":547,"mtime":1611847223265,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":834,"mtime":1612034388810,"results":"18","hashOfConfig":"16"},{"size":4037,"mtime":1611990631056,"results":"19","hashOfConfig":"16"},{"size":327,"mtime":1611893151037,"results":"20","hashOfConfig":"16"},{"size":170,"mtime":1611898534111,"results":"21","hashOfConfig":"16"},{"size":926,"mtime":1612013605551,"results":"22","hashOfConfig":"16"},{"size":89,"mtime":1611893738767,"results":"23","hashOfConfig":"16"},{"size":225,"mtime":1611894624774,"results":"24","hashOfConfig":"16"},{"size":6278,"mtime":1612034284089,"results":"25","hashOfConfig":"16"},{"size":2204,"mtime":1612086488109,"results":"26","hashOfConfig":"16"},{"size":989,"mtime":1612086570865,"results":"27","hashOfConfig":"16"},{"size":10792,"mtime":1612086127631,"results":"28","hashOfConfig":"16"},{"size":114,"mtime":1612086541630,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"10m5src",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\React\\test\\client\\src\\index.js",[],["61","62"],"E:\\React\\test\\client\\src\\reportWebVitals.js",[],"E:\\React\\test\\client\\src\\App.js",[],"E:\\React\\test\\client\\src\\components\\index.js",[],"E:\\React\\test\\client\\src\\axios\\store.js",[],"E:\\React\\test\\client\\src\\axios\\reducers\\index.js",[],"E:\\React\\test\\client\\src\\axios\\reducers\\cocktails.js",["63"],"const initialState = {\r\n    cocktail: {},\r\n    cocktails: [],\r\n    custom: [],\r\n    loading: true\r\n}\r\n\r\nexport default function (state = initialState, { type, payload, errors, error }) {\r\n    switch (type) {\r\n        case 'FETCH_COCKTAILS':\r\n            return {\r\n                ...state,\r\n                cocktails: payload,\r\n                loading: false\r\n            }\r\n        case 'FETCH_CUSTOM_COCKTAILS':\r\n            return {\r\n                ...state,\r\n                custom: payload,\r\n                loading: false\r\n            }\r\n        case 'SEARCH_RESULTS':\r\n            return {\r\n                ...state,\r\n                custom: payload,\r\n                loading: false\r\n            }\r\n        case 'FETCH_COCKTAIL':\r\n            return {\r\n                ...state,\r\n                cocktail: payload,\r\n                loading: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","E:\\React\\test\\client\\src\\history.js",[],"E:\\React\\test\\client\\src\\components\\errorpage.js",[],"E:\\React\\test\\client\\src\\components\\detailspage.js",[],"E:\\React\\test\\client\\src\\axios\\actions\\cocktails.js",[],"E:\\React\\test\\client\\src\\components\\layout.js",[],"E:\\React\\test\\client\\src\\components\\custom.js",["64"],"import React, { Component } from 'react'\r\nimport Layout from './layout';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { post, fetchcustom, search } from './../axios/actions/cocktails'\r\nimport { connect } from 'react-redux'\r\nimport { Modal, Button, Form, Table, InputGroup, FormControl } from 'react-bootstrap'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nclass custom extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            show: false,\r\n            data: [],\r\n            fields: [{ value: null }],\r\n            measure: [{ value: null }],\r\n            name: '',\r\n            instruction: '',\r\n            category: '',\r\n            searchKey: '',\r\n\r\n        }\r\n    }\r\n    handleShow = () => {\r\n        this.setState({\r\n            show: true\r\n        })\r\n    }\r\n    handleClose = () => {\r\n        this.setState({\r\n            show: false\r\n        })\r\n    }\r\n    handleChange = (i, event) => {\r\n        const values = [...this.state.fields];\r\n        values[i].value = event.target.value;\r\n        console.log(values)\r\n        this.setState({\r\n            fields: values\r\n        })\r\n\r\n    }\r\n\r\n    handleAdd = () => {\r\n        const values = [...this.state.fields];\r\n        values.push({ value: null });\r\n        this.setState({\r\n            fields: values\r\n        })\r\n\r\n    }\r\n    handleRemove = (i) => {\r\n        const values = [...this.state.fields];\r\n        values.splice(i, 1);\r\n        this.setState({\r\n            fields: values\r\n        })\r\n    }\r\n    handlemeasure = (i, event) => {\r\n        const values = [...this.state.measure];\r\n        values[i].value = event.target.value;\r\n\r\n        this.setState({\r\n            measure: values\r\n        })\r\n\r\n    }\r\n\r\n    handleAddmeasure = () => {\r\n        const values = [...this.state.measure];\r\n        values.push({ value: null });\r\n        this.setState({\r\n            measure: values\r\n        })\r\n\r\n    }\r\n    handleRemovemeasure = (i) => {\r\n        const values = [...this.state.measure];\r\n        values.splice(i, 1);\r\n        this.setState({\r\n            measure: values\r\n        })\r\n    }\r\n    handleinputChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n\r\n    }\r\n    notify = (message) => toast(`${message}`);\r\n    handlesubmit = async () => {\r\n        try {\r\n\r\n            const measures = []\r\n            const ingredients = []\r\n            const { measure, fields, name, category, instruction } = this.state\r\n            var i;\r\n            for (i = 0; i < measure.length; i++) {\r\n\r\n                measures.push(measure[i].value)\r\n            }\r\n            var j;\r\n            for (j = 0; j < fields.length; j++) {\r\n                console.log(fields[j].value)\r\n                ingredients.push(fields[j].value)\r\n            }\r\n            const data = {\r\n                name: name,\r\n                category: category,\r\n                instruction: instruction,\r\n                ingredients: ingredients,\r\n                measures: measures\r\n            }\r\n            this.setState({\r\n                show: false\r\n            })\r\n            await this.props.post(data)\r\n            await this.props.fetchcustom()\r\n            this.setState({\r\n                data: this.props.cocktails\r\n            })\r\n        } catch (error) {\r\n            const errObj = error.response.data.error.errors;\r\n            this.notify(`${Object.values(errObj)[0].properties.path} is required`)\r\n            // console.log(Object.values(errObj)[0].properties.path)\r\n        }\r\n\r\n    }\r\n    search = async () => {\r\n        this.setState({\r\n            data: this.props.cocktails\r\n        })\r\n\r\n    }\r\n    componentDidMount = async () => {\r\n        await this.props.fetchcustom()\r\n        this.setState({\r\n            data: this.props.cocktails\r\n        })\r\n    }\r\n    render() {\r\n        const { show, data, fields, measure } = this.state\r\n        console.log(data)\r\n        return (\r\n            <Layout>\r\n                <ToastContainer />\r\n                <div className=\"container\" style={{ border: 'solid #ccc 1px', backgroundColor: '#fff', padding: '100px' }}>\r\n                    <Form inline>\r\n                        <FormControl type=\"text\" name='searchKey' placeholder=\"Search\" onChange={(e) => this.handleinputChange(e)} className=\"mr-sm-2\" />\r\n                        <Button onClick={() => this.search()} >Search</Button>\r\n                    </Form>\r\n\r\n                    <Button style={{ float: 'right', marginBottom: '10px' }} variant=\"primary\" onClick={() => this.handleShow()}>\r\n                        Create </Button>\r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n\r\n                                <th>Name </th>\r\n                                <th>Category </th>\r\n                                <th>ingredients </th>\r\n                                <th>Measures </th>\r\n                                <th>Instruction</th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data !== undefined ? data.map((dat, i) => (<tr key={i}>\r\n\r\n                                <td>{dat.name}</td>\r\n                                <td>{dat.category}</td>\r\n                                <td>\r\n                                    {dat.ingredients.map(ink => (\r\n                                        <ul style={{ listStyle: 'none' }}>\r\n                                            <li>{ink}</li>\r\n                                        </ul>\r\n\r\n                                    ))}\r\n                                </td>\r\n                                <td>{dat.measures.map(mes => (\r\n                                    <ul style={{ listStyle: 'none' }}>\r\n                                        <li>{mes}</li>\r\n                                    </ul>\r\n                                ))}</td>\r\n                                <td>{dat.instruction}</td>\r\n\r\n                            </tr>)):null}\r\n\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n                <Modal show={show} onHide={() => this.handleClose()}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Custom cocktail</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form>\r\n\r\n                            <Form.Group controlId=\"formBasicEmail3\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control type=\"text\" name=\"name\" onChange={(e) => this.handleinputChange(e)} placeholder=\"Name\" />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicEmail2\">\r\n                                <Form.Label>Category</Form.Label>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    className=\"my-1 mr-sm-2\"\r\n                                    id=\"inlineFormCustomSelectPref\"\r\n                                    custom\r\n                                    name='category'\r\n                                    onChange={(e) => this.handleinputChange(e)}\r\n                                >\r\n                                    <option value=\"0\">Choose...</option>\r\n                                    <option value=\"alcoholic\">Alcoholic</option>\r\n                                    <option value=\"Non alcoholic\">Non alcoholic</option>\r\n                                    <option value=\"soft drink\">Soft drink</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Form.Label>Ingedients</Form.Label>\r\n                                <Button style={{ float: 'right', marginBottom: '5px' }} onClick={() => this.handleAdd()}> Add </Button>\r\n                                {fields.map((field, id) => (\r\n                                    <InputGroup className=\"mb-2\" key={id}>\r\n                                        <FormControl id={id} placeholder={`ingredient-${id}`} onChange={e => this.handleChange(id, e)} />\r\n                                        <InputGroup.Prepend key={id}>\r\n                                            <InputGroup.Text key={id} onClick={() => this.handleRemove(id)}>x</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                    </InputGroup>\r\n                                ))}\r\n\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicEmai\">\r\n                                <Form.Label>Measures</Form.Label>\r\n                                <Button style={{ float: 'right', marginBottom: '5px' }} onClick={() => this.handleAddmeasure()}> Add </Button>\r\n                                {measure.map((field, id) => (\r\n                                    <InputGroup className=\"mb-2\" key={id}>\r\n                                        <FormControl id={id} placeholder={`measure-${id}`} onChange={e => this.handlemeasure(id, e)} />\r\n                                        <InputGroup.Prepend key={id}>\r\n                                            <InputGroup.Text key={id} onClick={() => this.handleRemovemeasure(id)}>x</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                    </InputGroup>\r\n                                ))}\r\n\r\n\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                <Form.Label>Instruction</Form.Label>\r\n                                <Form.Control as=\"textarea\" name='instruction' onChange={(e) => this.handleinputChange(e)} rows={5} />\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={() => this.handleClose()}>\r\n                            Close\r\n          </Button>\r\n                        <Button variant=\"primary\" onClick={() => this.handlesubmit()}>\r\n                            Save Changes\r\n          </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cocktails: state.cocktailsData.custom,\r\n        loading: state.cocktailsData.loading,\r\n    }\r\n\r\n};\r\nexport default connect(mapStateToProps, { post, fetchcustom, search })(withRouter(custom));\r\n","E:\\React\\test\\client\\src\\components\\baseUrl.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":8,"column":1,"nodeType":"71","endLine":38,"endColumn":2},{"ruleId":"72","severity":1,"message":"73","line":168,"column":35,"nodeType":"74","messageId":"75","endLine":168,"endColumn":37},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]